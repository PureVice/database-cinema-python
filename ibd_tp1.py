# -*- coding: utf-8 -*-
"""IBD_TP1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/16Zj4BFKqS4z3VPWTxYxX5PhH5mdiVjz_
"""

import duckdb

def query(queryStr):
  result = duckdb.query(queryStr).to_df()
  return result

def printQuery(queryStr):
  print(query(queryStr))

CLIENTES = 'clientes.csv'
FILMES = '/tables/filmes.csv'
INGRESSOS = 'tables/ingressos.csv'
SALAS = 'tables\salas.csv'
SESSOES = 'tables\sessoes.csv'

#tecnicamente não precisa mais ne

"""cria o esquema

"""

#duckdb.sql(comando)
duckdb.sql("""CREATE TABLE IF NOT EXISTS filmes (
id INTEGER PRIMARY KEY,
titulo TEXT NOT NULL,
genero TEXT,
duracao INTEGER,
classificacao_indicativa INTEGER
);
""")

duckdb.sql("""CREATE TABLE IF NOT EXISTS salas (
id INTEGER PRIMARY KEY,
nome TEXT NOT NULL,
capacidade INTEGER
);""")

duckdb.sql("""CREATE TABLE IF NOT EXISTS sessoes (
id INTEGER PRIMARY KEY ,
filme_id INTEGER NOT NULL,
sala_id INTEGER NOT NULL,
data_hora DATETIME NOT NULL,
preco_ingresso DECIMAL(10,2) NOT NULL,
FOREIGN KEY (filme_id) REFERENCES filmes(id),
FOREIGN KEY (sala_id) REFERENCES salas(id)
);""")

duckdb.sql("""CREATE TABLE IF NOT EXISTS clientes (
id INTEGER PRIMARY KEY,
nome TEXT NOT NULL,
email TEXT,
data_nascimento DATE
);""")

duckdb.sql("""CREATE TABLE IF NOT EXISTS ingressos (
id INTEGER PRIMARY KEY,
sessao_id INTEGER NOT NULL,
cliente_id INTEGER NOT NULL,
data_compra DATETIME NOT NULL,
FOREIGN KEY (sessao_id) REFERENCES sessoes(id),
FOREIGN KEY (cliente_id) REFERENCES clientes(id)
);""")

"""popula o banco

"""

#truncate apaga todos os dados da tabela
duckdb.sql("""TRUNCATE TABLE filmes""")

duckdb.sql("""INSERT INTO filmes (id, titulo, genero, duracao, classificacao_indicativa) VALUES
(1, 'Vingadores: Ultimato', 'Acao', 181, 12),
(2, 'O Rei Leao', 'Animacao', 118, 0),
(3, 'Coringa', 'Drama', 122, 16),
(4, 'Parasita', 'Suspense', 132, 16),
(5, 'Minha Mae e uma Peca 3', 'Comedia', 111, 12),
(6, 'Velozes e Furiosos 9', 'Acao', 145, 14),
(7, 'Divertida Mente', 'Animacao', 95, 0),
(8, 'A Origem', 'Ficcao Cientifica', 148, 14),
(9, 'Se Beber, Nao Case!', 'Comedia', 100, 16),
(10, 'Interestelar', 'Ficcao Cientifica', 169, 10),
(11, 'Matrix', 'Acao', 136, 14),
(12, 'O Poderoso Chefao', 'Drama', 175, 16),
(13, 'Cidade de Deus', 'Drama', 130, 18),
(14, 'Bacurau', 'Drama', 131, 16),
(15, 'Mad Max: Estrada da Furia', 'Acao', 120, 16);
""")

duckdb.sql("""TRUNCATE TABLE salas""")

duckdb.sql("""INSERT INTO salas (id, nome, capacidade) VALUES
(1, 'Sala 1 IMAX', 250),
(2, 'Sala 2 VIP', 80),
(3, 'Sala 3 Dolby Atmos', 180),
(4, 'Sala 4 Standard', 120),
(5, 'Sala 5 Kids', 100),
(6, 'Sala 6 XD', 200),
(7, 'Sala 7 Comum', 160);
""")

duckdb.sql("""TRUNCATE TABLE sessoes""")

duckdb.sql("""INSERT INTO sessoes (id, filme_id, sala_id, data_hora, preco_ingresso) VALUES
(1, 1, 1, '2025-04-25 14:30:00', 35.50),
(2, 2, 5, '2025-04-25 16:00:00', 25.00),
(3, 3, 3, '2025-04-25 19:00:00', 30.00),
(4, 1, 1, '2025-04-25 20:30:00', 35.50),
(5, 5, 4, '2025-04-26 17:00:00', 28.00),
(6, 6, 6, '2025-04-26 21:00:00', 40.00),
(7, 4, 2, '2025-04-27 15:00:00', 45.00),
(8, 7, 5, '2025-04-27 10:00:00', 22.00),
(9, 8, 3, '2025-04-28 18:30:00', 32.00),
(10, 9, 4, '2025-04-28 22:00:00', 26.00),
(11, 1, 6, '2025-04-29 14:00:00', 38.00),
(12, 3, 3, '2025-04-29 17:45:00', 30.00),
(13, 5, 7, '2025-04-29 20:15:00', 27.00),
(14, 10, 1, '2025-04-30 19:30:00', 36.00),
(15, 11, 6, '2025-05-01 16:30:00', 39.00),
(16, 12, 2, '2025-05-01 20:00:00', 48.00),
(17, 13, 3, '2025-05-02 21:15:00', 33.00),
(18, 14, 7, '2025-05-02 18:00:00', 29.00),
(19, 15, 1, '2025-05-03 15:45:00', 37.00),
(20, 1, 3, '2025-05-03 18:45:00', 34.00),
(21, 5, 4, '2025-05-03 14:00:00', 28.00),
(22, 7, 5, '2025-04-25 11:00:00', 22.00),
(23, 1, 1, '2025-05-10 19:00:00', 35.50),
(24, 12, 3, '2025-05-11 20:30:00', 33.00),
(25, 13, 7, '2025-05-12 22:00:00', 29.00),
(26, 9, 4, '2025-04-25 22:30:00', 26.00),
(27, 8, 6, '2025-04-25 19:45:00', 38.00),
(28, 14, 2, '2025-05-15 18:15:00', 45.00),
(29, 15, 6, '2025-05-16 21:30:00', 40.00),
(30, 11, 1, '2025-05-17 17:00:00', 39.00);""")

duckdb.sql("""TRUNCATE TABLE clientes""")

duckdb.sql("""INSERT INTO clientes (id, nome, email, data_nascimento) VALUES
(1, 'Ana Silva', 'ana.silva@email.com', '1990-05-15'),
(2, 'Bruno Costa', 'bruno.costa@email.com', '1985-11-23'),
(3, 'Carla Dias', 'carla.dias@email.com', '2000-01-30'),
(4, 'Daniel Martins', 'daniel.martins@email.com', '1998-07-10'),
(5, 'Eduarda Ferreira', 'eduarda.ferreira@email.com', '1995-03-03'),
(6, 'Fabio Lima', 'fabio.lima@email.com', '1978-12-01'),
(7, 'Gabriela Alves', 'gabriela.alves@email.com', '2002-09-18'),
(8, 'Hugo Santos', 'hugo.santos@email.com', '1993-06-25'),
(9, 'Isabela Pereira', 'isabela.pereira@email.com', '1980-02-14'),
(10, 'Joao Oliveira', 'joao.oliveira@email.com', '1999-08-05');""")

duckdb.sql("""TRUNCATE TABLE ingressos""")

duckdb.sql("""INSERT INTO ingressos (id, sessao_id, cliente_id, data_compra) VALUES
(1, 1, 1, '2025-04-24 10:15:00'),
(2, 1, 2, '2025-04-24 11:30:00'),
(3, 3, 3, '2025-04-25 09:00:00'),
(4, 4, 1, '2025-04-25 10:00:00'),
(5, 4, 4, '2025-04-25 10:05:00'),
(6, 5, 5, '2025-04-26 12:00:00'),
(7, 6, 6, '2025-04-26 15:30:00'),
(8, 6, 1, '2025-04-26 16:00:00'),
(9, 7, 7, '2025-04-27 08:45:00'),
(10, 9, 8, '2025-04-28 10:20:00'),
(11, 10, 2, '2025-04-28 19:50:00'),
(12, 10, 9, '2025-04-28 20:00:00'),
(13, 11, 10, '2025-04-29 09:10:00'),
(14, 12, 3, '2025-04-29 13:30:00'),
(15, 14, 5, '2025-04-30 11:00:00'),
(16, 14, 6, '2025-04-30 11:05:00'),
(17, 1, 8, '2025-04-25 13:00:00'),
(18, 23, 1, '2025-05-10 10:00:00'),
(19, 23, 2, '2025-05-10 10:05:00'),
(20, 24, 7, '2025-05-11 14:00:00'),
(21, 25, 8, '2025-05-12 18:00:00'),
(22, 26, 4, '2025-04-25 15:00:00'),
(23, 27, 5, '2025-04-25 16:30:00'),
(24, 3, 2, '2025-04-25 10:30:00'),
(25, 20, 1, '2025-05-03 10:00:00'),
(26, 20, 2, '2025-05-03 10:05:00'),
(27, 20, 3, '2025-05-03 10:10:00'),
(28, 24, 4, '2025-05-11 15:00:00'),
(29, 24, 5, '2025-05-11 15:05:00'),
(30, 28, 9, '2025-05-14 17:00:00'),
(31, 29, 10, '2025-05-15 19:00:00'),
(32, 30, 6, '2025-05-16 10:00:00'),
(33, 16, 1, '2025-05-01 10:00:00'),
(34, 17, 2, '2025-05-02 10:00:00'),
(35, 18, 3, '2025-05-02 10:00:00');""")

query_base = f"""
SELECT *
FROM filmes
"""

printQuery(query_base)

query_a1 = f"""
select titulo from filmes as f where f.genero = 'Ação';
"""

printQuery(query_a1)
#está 'Acao' no nome da coluna

query_a2 = f"""
select nome from salas as s where s.capacidade > 100;
"""

printQuery(query_a2)

query_a3 = f"""
select f.titulo, s.preco_ingresso from filmes as f inner join sessoes as s
on s.filme_id = f.id;
"""

printQuery(query_a3)

query_a4 = f"""
select nome from clientes as c
inner join ingressos as i on c.id = i.cliente_id;
"""

printQuery(query_a4)

query_a5 = f"""
select titulo from filmes as f where f.classificacao_indicativa > 16;
"""
#no enunciado aparece nome, seria "select nome"
#só que daria erro, então coloquei título. vale a pena deixar explicito no trabalho
printQuery(query_a5)

query_a6 = f"""
select nome, data_compra from clientes as c
inner join ingressos as i on c.id = i.cliente_id
inner join sessoes as s on i.sessao_id = s.id;
"""

printQuery(query_a6)

query_a7 = f"""
select titulo from filmes as f
inner join sessoes as s on f.id = s.filme_id;
"""

printQuery(query_a7)

query_a8 = f"""
SELECT id FROM sessoes WHERE CAST(data_hora AS VARCHAR) LIKE '2025-04-25%';
"""
#em mySQL não precisa de cast, mas nesse precisa
printQuery(query_a8)

query_a9 = f"""
select cliente_id, count(*) from ingressos group by cliente_id;
"""

printQuery(query_a9)

query_a10 = f"""
select titulo from filmes as f
inner join sessoes as s on f.id = s.filme_id
inner join ingressos as i on s.id = i.sessao_id;
"""

printQuery(query_a10)

